name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript check
      run: npx tsc --noEmit
      
    - name: Run ESLint
      run: npx eslint src --ext .ts,.tsx --max-warnings 0
      
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
      
    - name: Build application
      run: npm run build
      env:
        REACT_APP_ENVIRONMENT: production
    
    - name: Build crew generator
      run: |
        cd crew-generator
        npm ci
        npm run build
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        VITE_PUBLIC_BASE_PATH: /crew/
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          build/
          crew-generator/dist/

  build-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for staging with banner
      run: |
        echo "üèóÔ∏è Starting staging build at $(date)"
        echo "üì¶ Node version: $(node --version)"
        echo "üì¶ NPM version: $(npm --version)"
        echo "üîç Environment: staging"
        rm -rf build/ || true
        npm run build
        echo "‚úÖ Build completed, checking output..."
        ls -la build/
        echo "üì¶ Checking for crew flag in bundle..."
        find build/static/js -name "*.js" -exec grep -c "crew" {} \; || echo "No crew found in any JS files"
      env:
        REACT_APP_ENVIRONMENT: staging
    
    - name: Build crew generator for staging
      run: |
        cd crew-generator
        npm ci
        npm run build
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        VITE_PUBLIC_BASE_PATH: /crew/
        
    - name: Upload staging build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: staging-build-files
        path: |
          build/
          crew-generator/dist/

  deploy-staging:
    needs: build-staging
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Download staging build artifacts
      uses: actions/download-artifact@v4
      with:
        name: staging-build-files
        path: build/
        
    - name: Deploy to staging
      env:
        SFTP_PASSWORD: ${{ secrets.SFTP_PASSWORD }}
        STAGING_SFTP_USERNAME: ${{ secrets.STAGING_SFTP_USERNAME }}
        STAGING_SFTP_HOST: ${{ secrets.STAGING_SFTP_HOST }}
        STAGING_SFTP_PATH: ${{ secrets.STAGING_SFTP_PATH }}
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "üïê Deployment started at: $(date)"
        
        # Install sshpass for automated SFTP
        sudo apt-get update && sudo apt-get install -y sshpass
        
        # Debug connection info (without password)  
        echo "Connecting to: ${STAGING_SFTP_USERNAME}@${STAGING_SFTP_HOST}"
        echo "Target path: ${STAGING_SFTP_PATH}"
        
        # Verify build contains our changes before deploying
        echo "üîç Pre-deployment verification..."
        echo "üìÅ Current directory structure:"
        find . -name "*.js" -type f | head -10
        
        # Updated path - artifacts are extracted differently
        CREW_COUNT=$(find . -name "*.js" -type f -exec grep -c "crew" {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}')
        echo "üìä Found $CREW_COUNT instances of 'crew' in build files"
        
        if [ -z "$CREW_COUNT" ] || [ "$CREW_COUNT" -lt 1 ]; then
          echo "‚ùå Build verification failed: crew flag not found in build"
          echo "üîç Expected at least 1 instance, found: ${CREW_COUNT:-0}"
          echo "üõ†Ô∏è Debug: Searching for any crew references..."
          find . -name "*.js" -type f -exec grep -l "crew" {} \; 2>/dev/null || echo "No files containing 'crew' found"
          exit 1
        fi
        
        # CRITICAL DEPLOYMENT SECTION
        # 
        # üö® COMMON ISSUE: "Changes don't appear on staging despite successful deployment"
        # 
        # SYMPTOMS:
        # - GitHub Actions shows "deployment successful" ‚úÖ
        # - But staging site shows old content/missing features
        # - Browser shows old JavaScript bundle names (e.g., main.c8ad5816.js instead of main.1b7019ed.js)
        # 
        # ROOT CAUSES & FIXES:
        # 1. WRONG UPLOAD PATH: GitHub Actions artifacts extract to build/build/* not build/*
        #    ‚ùå Wrong: scp -r build/* ‚Üí uploads build contents incorrectly
        #    ‚úÖ Fixed: scp -r build/build/* ‚Üí uploads from correct nested structure
        # 
        # 2. STALE FILES NOT CLEANED: Old files remain on server, causing conflicts
        #    ‚ùå Problem: New main.abc123.js uploaded but old main.xyz789.js still served
        #    ‚úÖ Solution: Clean staging directory before upload (see cleanup step below)
        # 
        # 3. BROWSER CACHING: User sees cached version even after deployment
        #    ‚úÖ Solution: Hard refresh (Ctrl+F5) or private browsing window
        # 
        # DEBUGGING STEPS:
        # 1. Check "üóÇÔ∏è Current build structure" logs below to verify file paths
        # 2. Compare main.*.js filename in logs vs. staging site source
        # 3. Verify cleanup step ran without errors
        # 4. Check verification found expected content (e.g., feature flags)
        
        echo "üì§ Uploading files to staging..."
        echo "üóÇÔ∏è Current build structure:"
        find build -name "*.js" -o -name "*.html" | head -10
        
        # CLEANUP STEP: Remove old files to prevent serving stale content
        # This is CRITICAL - without this, old JavaScript bundles remain on server
        echo "üßπ Cleaning staging directory..."
        sshpass -p "${SFTP_PASSWORD}" ssh -p 22212 -o StrictHostKeyChecking=no "${STAGING_SFTP_USERNAME}@${STAGING_SFTP_HOST}" "rm -rf ${STAGING_SFTP_PATH}/static ${STAGING_SFTP_PATH}/*.js ${STAGING_SFTP_PATH}/*.css ${STAGING_SFTP_PATH}/*.html"
        
        # CORRECTED UPLOAD PATH: Use build/build/* for GitHub Actions artifact structure
        echo "üì§ Uploading main site build files..."
        sshpass -p "${SFTP_PASSWORD}" scp -P 22212 -o StrictHostKeyChecking=no -o Compression=yes -r build/build/* "${STAGING_SFTP_USERNAME}@${STAGING_SFTP_HOST}:${STAGING_SFTP_PATH}/"
        
        # Deploy crew generator to /crew subdirectory
        if [ -d "crew-generator/dist" ]; then
          sshpass -p "${SFTP_PASSWORD}" scp -P 22212 -o StrictHostKeyChecking=no -o Compression=yes -r crew-generator/dist/* "${STAGING_SFTP_USERNAME}@${STAGING_SFTP_HOST}:${STAGING_SFTP_PATH}/crew/"
        elif [ -d "./build/crew-generator/dist" ]; then
          echo "‚úÖ Found crew generator at ./build/crew-generator/dist"
          sshpass -p "${SFTP_PASSWORD}" scp -P 22212 -o StrictHostKeyChecking=no -o Compression=yes -r ./build/crew-generator/dist/* "${STAGING_SFTP_USERNAME}@${STAGING_SFTP_HOST}:${STAGING_SFTP_PATH}/crew/"
        else
          echo "‚ùå crew-generator/dist not found in any expected location"
          find . -name "dist" -type d
        fi
        
        echo "üéâ Staging deployment complete!"
        echo "View at: https://${{ secrets.STAGING_DOMAIN }}"

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: build/
        
    - name: Deploy to production
      env:
        SFTP_PASSWORD: ${{ secrets.SFTP_PASSWORD }}
        SFTP_USERNAME: ${{ secrets.SFTP_USERNAME }}
        SFTP_HOST: ${{ secrets.SFTP_HOST }}
        SFTP_PATH: ${{ secrets.SFTP_PATH }}
      run: |
        echo "üöÄ Deploying to production..."
        # Install sshpass for automated SFTP
        sudo apt-get update && sudo apt-get install -y sshpass
        
        # Debug connection info (without password)
        echo "Connecting to: ${SFTP_USERNAME}@${SFTP_HOST}"
        echo "Target path: ${SFTP_PATH}"
        
        # Deploy main site to production
        sshpass -p "${SFTP_PASSWORD}" scp -P 22212 -o StrictHostKeyChecking=no -o Compression=yes -r build/* "${SFTP_USERNAME}@${SFTP_HOST}:${SFTP_PATH}"
        
        # Deploy crew generator to /crew subdirectory
        if [ -d "crew-generator/dist" ]; then
          sshpass -p "${SFTP_PASSWORD}" scp -P 22212 -o StrictHostKeyChecking=no -o Compression=yes -r crew-generator/dist/* "${SFTP_USERNAME}@${SFTP_HOST}:${SFTP_PATH}/crew/"
        elif [ -d "./build/crew-generator/dist" ]; then
          echo "‚úÖ Found crew generator at ./build/crew-generator/dist"
          sshpass -p "${SFTP_PASSWORD}" scp -P 22212 -o StrictHostKeyChecking=no -o Compression=yes -r ./build/crew-generator/dist/* "${SFTP_USERNAME}@${SFTP_HOST}:${SFTP_PATH}/crew/"
        else
          echo "‚ùå crew-generator/dist not found in any expected location"
          find . -name "dist" -type d
        fi
        
        echo "üéâ Production deployment complete!"
        echo "View at: https://${{ secrets.PRODUCTION_DOMAIN }}"
